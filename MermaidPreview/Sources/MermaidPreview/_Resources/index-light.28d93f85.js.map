{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,QCOO,OAAM,UAAuB,YAEhC,WAAW,oBAAqB,CAC5B,MAAO,CAAC,QAAQ,AACpB,CAEA,yBAAyB,CAAI,CAAE,CAAQ,CAAE,CAAQ,CAAE,CAC/C,QAAQ,KAAK,CAAE,2BAA4B,EAAM,EAAU,GAE9C,UAAT,GAAoB,IAAa,IACjC,IAAI,CAAC,CAAA,CAAK,GACV,IAAI,CAAC,CAAA,CAAc,GAE3B,CAEA,aAAc,CACV,KAAK,GAEL,IAAI,CAAC,QAAQ,CAAG,KAChB,IAAI,CAAC,YAAY,CAAG,KACpB,IAAI,CAAC,cAAc,CAAG,KAGtB,IAAM,EAAa,IAAI,CAAC,YAAY,CAAC,CAAE,KAAM,MAAO,GAE9C,EAAQ,SAAS,aAAa,CAAC,QACrC,CAAA,EAAM,WAAW,CAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;IAyBzB,CAAC,CACG,EAAW,WAAW,CAAC,GAEvB,IAAM,EAAY,SAAS,aAAa,CAAC,OACzC,EAAU,SAAS,CAAC,GAAG,CAAC,UACxB,EAAU,SAAS,CAAC,GAAG,CAAC,UACxB,EAAU,SAAS,CAAC,GAAG,CAAC,QACxB,EAAU,SAAS,CAAC,GAAG,CAAC,gBACxB,EAAU,SAAS,CAAC,GAAG,CAAC,kBACxB,EAAU,SAAS,CAAC,GAAG,CAAC,cACxB,EAAU,SAAS,CAAC,GAAG,CAAC,WAExB,EAAW,WAAW,CAAC,GAEvB,IAAI,CAAC,CAAA,CAAc,EAEvB,CAMA,IAAI,CAAA,CAAiB,GACjB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAC5B,MAAM,CAAC,AAAA,GAAQ,EAAK,QAAQ,GAAK,IAAI,CAAC,SAAS,EAC/C,GAAG,CAAC,AAAA,GAAQ,EAAK,WAAW,EAAE,QAC9B,IAAI,CAAC,GACd,CAMA,IAAI,CAAA,CAAY,UAEZ,AAAI,IAAI,CAAC,QAAQ,CAEb,AAAI,IAAI,CAAC,YAAY,CACV,CAAC;QAChB,EAAE,IAAI,CAAC,QAAQ,CAAC;iBACP,EAAE,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC,CAGU,IAAI,CAAC,QAAQ,CAGjB,IAAI,CAAC,CAAA,CAAiB,AACjC,CAEA,MAAM,CAAA,CAAc,GAChB,GAAI,CAAC,IAAI,CAAC,CAAA,CAAY,CAAG,OAGzB,IAAM,EAAe,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,YAEnD,MAAO,AAAA,CAAA,EAAA,EAAA,CAAM,AAAN,EAAQ,MAAM,CAAC,QAAS,IAAI,CAAC,CAAA,CAAY,EAE3C,IAAI,CAAC,AAAA,IAIF,GAAM,CAAE,MAAO,CAAK,CAAE,OAAQ,CAAM,CAAE,CAAG,EAAa,qBAAqB,GAC3E,QAAQ,KAAK,CAAE,eAAgB,EAAO,GACtC,IAAM,EAAa,EAAI,GAAG,CACrB,OAAO,CAAC,mBAAoB,CAAC,QAAQ,EAAE,EAAO,CAAC,CAAC,EAChD,OAAO,CAAC,kBAAmB,CAAC,OAAO,EAAE,EAAM,CAAC,CAAC,CAElD,CAAA,EAAa,SAAS,CAAG,CAC7B,GACC,IAAI,CAAC,IAAM,IAAI,CAAC,CAAA,CAAW,IAC3B,KAAK,CAAC,AAAA,GAAK,QAAQ,KAAK,CAAC,eAAgB,GAElD,CAEA,CAAA,CAAW,GAIP,IAAM,EAAO,EAAA,MAAA,CAAU,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,gBAGzC,EAAO,IAAI,CAEjB,EAAK,IAAI,CAAC,WAEN,IAAM,EAAM,EAAA,MAAA,CAAU,IAAI,EAG1B,EAAI,IAAI,CAAC,MAAQ,EAAI,IAAI,GAAK,QAE9B,IAAM,EAAQ,EAAI,MAAM,CAAC,KAGnB,EAAO,EAAA,IAAA,GAAU,EAAE,CAAC,OAAQ,AAAA,IAC9B,EAAM,IAAI,CAAC,YAAa,EAAM,SAAS,EACvC,EAAK,cAAc,CAAG,EAAM,SAAS,AACzC,GAEM,EAAY,EAAI,IAAI,CAAC,EAEC,QAAxB,EAAK,cAAc,GACnB,EAAM,IAAI,CAAC,YAAa,EAAK,cAAc,EAE3C,EAAU,IAAI,CAAC,EAAK,SAAS,CAAE,EAAK,cAAc,EAG1D,EAEJ,CAEA,CAAA,CAAU,CAAC,CAAC,EACR,GAAM,CAAE,OAAQ,CAAU,CAAE,CAAG,CAE/B,CAAA,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,CAAA,CAAc,EACvB,CAEA,CAAA,CAAS,CAAC,CAAC,EAEP,GAAM,CAAE,OAAQ,CAAW,CAAE,CAAG,CAEhC,CAAA,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,CAAA,CAAc,EACvB,CAEA,CAAA,CAAK,GACD,QAAQ,KAAK,CAAE,QAAS,IAAI,CAAC,UAAU,CAAC,KAAK,EAC7C,AAAA,CAAA,EAAA,EAAA,CAAM,AAAN,EAAQ,UAAU,CAAC,CACf,SAAU,OACV,YAAa,CAAA,EACb,MAAO,IAAI,CAAC,YAAY,CAAC,UAAY,OACrC,UAAW,CAAE,YAAa,CAAA,CAAK,EAC/B,SAAU,CAAE,YAAa,CAAA,CAAM,EAC/B,MAAO,CAAE,YAAa,CAAA,CAAM,EAC5B,QAAS,CAAE,YAAa,CAAA,CAAM,EAC9B,SAAU,CAAE,YAAa,CAAA,CAAM,EAC/B,MAAO,CAAE,YAAa,CAAA,CAAM,EAC5B,MAAO,CAAE,YAAa,CAAA,CAAM,EAC5B,GAAI,CAAE,YAAa,CAAA,CAAM,EACzB,IAAK,CAAE,YAAa,CAAA,CAAM,EAC1B,cAAe,CAAE,YAAa,CAAA,CAAM,EACpC,QAAS,CAAE,YAAa,CAAA,CAAM,EAC9B,YAAa,CAAE,YAAa,CAAA,CAAM,EAClC,QAAS,CAAE,YAAa,CAAA,CAAM,EAC9B,SAAU,CAAE,YAAa,CAAA,CAAM,EAC/B,GAAI,CAAE,YAAa,CAAA,CAAM,EACzB,OAAQ,CAAE,YAAa,CAAA,CAAM,EAC7B,MAAO,CAAE,YAAa,CAAA,CAAM,CAGhC,EACJ,CAEA,CAAA,CAAc,CAAG,IAAM,IAAI,CAAC,CAAA,CAAc,EAAE,AAE5C,CAAA,mBAAoB,CAEhB,IAAI,CAAC,gBAAgB,CAAC,QAAS,IAAI,CAAC,CAAA,CAAU,EAC9C,IAAI,CAAC,gBAAgB,CAAC,eAAgB,IAAI,CAAC,CAAA,CAAS,EACpD,OAAO,gBAAgB,CAAC,SAAU,IAAI,CAAC,CAAA,CAAc,CAGzD,CAEA,sBAAuB,CAEnB,IAAI,CAAC,mBAAmB,CAAC,QAAS,IAAI,CAAC,CAAA,CAAU,EACjD,IAAI,CAAC,mBAAmB,CAAC,eAAgB,IAAI,CAAC,CAAA,CAAS,EACvD,OAAO,mBAAmB,CAAC,SAAU,IAAI,CAAC,CAAA,CAAc,CAC5D,CAEJ,CAEK,OAAO,cAAc,CAAC,GAAG,CAAC,oBAC3B,OAAO,cAAc,CAAC,MAAM,CAAC,kBAAmB","sources":["<anon>","src/mermaid-preview.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire7292\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire7292\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $4jcZX = parcelRequire(\"4jcZX\");\n\nvar $2YFJl = parcelRequire(\"2YFJl\");\nclass $667cbdd6b09bcfba$export$52d2d9ddd9ad726 extends HTMLElement {\n    static get observedAttributes() {\n        return [\n            \"theme\"\n        ];\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        console.debug(\"attributeChangedCallback\", name, oldValue, newValue);\n        if (name === \"theme\" && oldValue !== newValue) {\n            this.#init();\n            this.#renderDiagram();\n        }\n    }\n    constructor(){\n        super();\n        this._content = null;\n        this._activeClass = null;\n        this._lastTransform = null;\n        const shadowRoot = this.attachShadow({\n            mode: \"open\"\n        });\n        const style = document.createElement(\"style\");\n        style.textContent = `\n    :host {\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    .h-full {\n      height: 100%;\n    }\n    .w-full {\n      width: 100%;\n    }\n    .flex {\n      display: flex;\n    }\n    .items-center {\n      align-items: center;\n    }\n    .justify-center {\n      justify-content: center;\n    }\n    .bg-neutral {\n      --tw-bg-opacity: 1;\n      background-color: var(--fallback-n,oklch(var(--n)/var(--tw-bg-opacity)));\n  }\n    `;\n        shadowRoot.appendChild(style);\n        const container = document.createElement(\"div\");\n        container.classList.add(\"h-full\");\n        container.classList.add(\"w-full\");\n        container.classList.add(\"flex\");\n        container.classList.add(\"items-center\");\n        container.classList.add(\"justify-center\");\n        container.classList.add(\"bg-neutral\");\n        container.classList.add(\"mermaid\");\n        shadowRoot.appendChild(container);\n        this.#renderDiagram();\n    }\n    /**\n     * @returns {ChildNode[]}\n     * @private\n     */ get #textNodesContent() {\n        return Array.from(this.childNodes).filter((node)=>node.nodeType === this.TEXT_NODE).map((node)=>node.textContent?.trim()).join(\"\");\n    }\n    /**\n     * @returns {string}\n     * @private\n     */ get #textContent() {\n        if (this._content) {\n            if (this._activeClass) return `\n        ${this._content}\n        classDef ${this._activeClass} fill:#f96\n        `;\n            return this._content;\n        }\n        return this.#textNodesContent;\n    }\n    async #renderDiagram() {\n        if (!this.#textContent) return;\n        // console.debug( this.#textContent )\n        const svgContainer = this.shadowRoot.querySelector(\".mermaid\");\n        return (0, $4jcZX.N).render(`graph`, this.#textContent).then((res)=>{\n            // console.debug(\"RENDER COMPLETE\", svgContainer);\n            // console.debug( res.svg )\n            // svgContainer.innerHTML = res.svg\n            const { right: width, bottom: height } = svgContainer.getBoundingClientRect();\n            console.debug(\"svgContainer\", width, height);\n            const translated = res.svg.replace(/height=\"[\\d\\.]+\"/, `height=\"${height}\"`).replace(/width=\"[\\d\\.]+\"/, `width=\"${width}\"`);\n            // console.debug( translated );\n            svgContainer.innerHTML = translated;\n        }).then(()=>this.#svgPanZoom()).catch((e)=>console.error(\"RENDER ERROR\", e));\n    }\n    #svgPanZoom() {\n        // console.debug( '_lastTransform', this._lastTransform )\n        const svgs = $2YFJl.select(this.shadowRoot).select(\".mermaid svg\");\n        // console.debug( 'svgs', svgs )\n        const self = this;\n        svgs.each(function() {\n            // 'this' refers to the current DOM element\n            const svg = $2YFJl.select(this);\n            // console.debug( 'svg', svg );\n            svg.html(\"<g>\" + svg.html() + \"</g>\");\n            const inner = svg.select(\"g\");\n            // console.debug( 'inner', inner )\n            const zoom = $2YFJl.zoom().on(\"zoom\", (event)=>{\n                inner.attr(\"transform\", event.transform);\n                self._lastTransform = event.transform;\n            });\n            const selection = svg.call(zoom);\n            if (self._lastTransform !== null) {\n                inner.attr(\"transform\", self._lastTransform);\n                // [D3.js Set initial zoom level](https://stackoverflow.com/a/46437252/521197)\n                selection.call(zoom.transform, self._lastTransform);\n            }\n        });\n    }\n    #onContent(e) {\n        const { detail: newContent } = e;\n        this._content = newContent;\n        this.#renderDiagram();\n    }\n    #onActive(e) {\n        const { detail: activeClass } = e;\n        this._activeClass = activeClass;\n        this.#renderDiagram();\n    }\n    #init() {\n        console.debug(\"#init\", this.attributes.theme);\n        (0, $4jcZX.N).initialize({\n            logLevel: \"none\",\n            startOnLoad: false,\n            theme: this.getAttribute(\"theme\") ?? \"dark\",\n            flowchart: {\n                useMaxWidth: false\n            },\n            sequence: {\n                useMaxWidth: false\n            },\n            gantt: {\n                useMaxWidth: false\n            },\n            journey: {\n                useMaxWidth: false\n            },\n            timeline: {\n                useMaxWidth: false\n            },\n            class: {\n                useMaxWidth: false\n            },\n            state: {\n                useMaxWidth: false\n            },\n            er: {\n                useMaxWidth: false\n            },\n            pie: {\n                useMaxWidth: false\n            },\n            quadrantChart: {\n                useMaxWidth: false\n            },\n            xyChart: {\n                useMaxWidth: false\n            },\n            requirement: {\n                useMaxWidth: false\n            },\n            mindmap: {\n                useMaxWidth: false\n            },\n            gitGraph: {\n                useMaxWidth: false\n            },\n            c4: {\n                useMaxWidth: false\n            },\n            sankey: {\n                useMaxWidth: false\n            },\n            block: {\n                useMaxWidth: false\n            }\n        });\n    }\n    #resizeHandler = ()=>this.#renderDiagram();\n    connectedCallback() {\n        this.addEventListener(\"graph\", this.#onContent);\n        this.addEventListener(\"graph-active\", this.#onActive);\n        window.addEventListener(\"resize\", this.#resizeHandler);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"graph\", this.#onContent);\n        this.removeEventListener(\"graph-active\", this.#onActive);\n        window.removeEventListener(\"resize\", this.#resizeHandler);\n    }\n}\nif (!window.customElements.get(\"mermaid-preview\")) window.customElements.define(\"mermaid-preview\", $667cbdd6b09bcfba$export$52d2d9ddd9ad726);\n\n\n//# sourceMappingURL=index-light.28d93f85.js.map\n","import mermaid from 'mermaid';\nimport * as d3 from 'd3'\n\n/**\n * WcMermaid\n * @class\n */\nexport class MermaidPreview extends HTMLElement {\n\n    static get observedAttributes() {\n        return ['theme'];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        console.debug( 'attributeChangedCallback', name, oldValue, newValue )\n        \n        if( name === 'theme' && oldValue !== newValue ) {\n            this.#init()\n            this.#renderDiagram()\n        }\n    }\n\n    constructor() {\n        super();\n\n        this._content = null\n        this._activeClass = null\n        this._lastTransform = null\n\n\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n        const style = document.createElement(\"style\");\n        style.textContent = `\n    :host {\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    .h-full {\n      height: 100%;\n    }\n    .w-full {\n      width: 100%;\n    }\n    .flex {\n      display: flex;\n    }\n    .items-center {\n      align-items: center;\n    }\n    .justify-center {\n      justify-content: center;\n    }\n    .bg-neutral {\n      --tw-bg-opacity: 1;\n      background-color: var(--fallback-n,oklch(var(--n)/var(--tw-bg-opacity)));\n  }\n    `\n        shadowRoot.appendChild(style);\n\n        const container = document.createElement('div')\n        container.classList.add(\"h-full\");\n        container.classList.add(\"w-full\");\n        container.classList.add(\"flex\");\n        container.classList.add(\"items-center\");\n        container.classList.add(\"justify-center\");\n        container.classList.add(\"bg-neutral\");\n        container.classList.add(\"mermaid\");\n\n        shadowRoot.appendChild(container);\n\n        this.#renderDiagram()\n\n    }\n\n    /**\n     * @returns {ChildNode[]}\n     * @private\n     */\n    get #textNodesContent() {\n        return Array.from(this.childNodes)\n            .filter(node => node.nodeType === this.TEXT_NODE)\n            .map(node => node.textContent?.trim())\n            .join('');\n    }\n\n    /**\n     * @returns {string}\n     * @private\n     */\n    get #textContent() {\n\n        if (this._content) {\n\n            if (this._activeClass) {\n                return `\n        ${this._content}\n        classDef ${this._activeClass} fill:#f96\n        `\n            }\n\n            return this._content\n        }\n\n        return this.#textNodesContent;\n    }\n\n    async #renderDiagram() {\n        if( !this.#textContent ) return \n        // console.debug( this.#textContent )\n\n        const svgContainer = this.shadowRoot.querySelector('.mermaid')\n\n        return mermaid.render(`graph`, this.#textContent)\n\n            .then(res => {\n                // console.debug(\"RENDER COMPLETE\", svgContainer);\n                // console.debug( res.svg )\n                // svgContainer.innerHTML = res.svg\n                const { right: width, bottom: height } = svgContainer.getBoundingClientRect();\n                console.debug( 'svgContainer', width, height );\n                const translated = res.svg\n                    .replace(/height=\"[\\d\\.]+\"/, `height=\"${height}\"`)\n                    .replace(/width=\"[\\d\\.]+\"/, `width=\"${width}\"`);\n                // console.debug( translated );\n                svgContainer.innerHTML = translated;\n            })\n            .then(() => this.#svgPanZoom())\n            .catch(e => console.error(\"RENDER ERROR\", e))\n\n    }\n\n    #svgPanZoom() {\n\n        // console.debug( '_lastTransform', this._lastTransform )\n\n        const svgs = d3.select(this.shadowRoot).select(\".mermaid svg\");\n        // console.debug( 'svgs', svgs )\n\n        const self = this;\n\n        svgs.each(function () {\n            // 'this' refers to the current DOM element\n            const svg = d3.select(this);\n\n            // console.debug( 'svg', svg );\n            svg.html(\"<g>\" + svg.html() + \"</g>\");\n\n            const inner = svg.select(\"g\");\n            // console.debug( 'inner', inner )\n\n            const zoom = d3.zoom().on(\"zoom\", event => {\n                inner.attr(\"transform\", event.transform);\n                self._lastTransform = event.transform;\n            });\n\n            const selection = svg.call(zoom);\n\n            if (self._lastTransform !== null) {\n                inner.attr(\"transform\", self._lastTransform)\n                // [D3.js Set initial zoom level](https://stackoverflow.com/a/46437252/521197)\n                selection.call(zoom.transform, self._lastTransform);\n            }\n\n        });\n\n    }\n\n    #onContent(e) {\n        const { detail: newContent } = e\n\n        this._content = newContent\n        this.#renderDiagram()\n    }\n\n    #onActive(e) {\n\n        const { detail: activeClass } = e\n\n        this._activeClass = activeClass;\n        this.#renderDiagram()\n    }\n\n    #init() {\n        console.debug( '#init', this.attributes.theme )\n        mermaid.initialize({\n            logLevel: 'none',\n            startOnLoad: false,\n            theme: this.getAttribute('theme') ?? 'dark',\n            flowchart: { useMaxWidth: false},\n            sequence: { useMaxWidth: false },\n            gantt: { useMaxWidth: false },\n            journey: { useMaxWidth: false },\n            timeline: { useMaxWidth: false },\n            class: { useMaxWidth: false },\n            state: { useMaxWidth: false },\n            er: { useMaxWidth: false },\n            pie: { useMaxWidth: false },\n            quadrantChart: { useMaxWidth: false },\n            xyChart: { useMaxWidth: false },\n            requirement: { useMaxWidth: false },\n            mindmap: { useMaxWidth: false },\n            gitGraph: { useMaxWidth: false },\n            c4: { useMaxWidth: false },\n            sankey: { useMaxWidth: false },\n            block: { useMaxWidth: false },\n        \n\n        });\n    }\n\n    #resizeHandler = () => this.#renderDiagram()\n\n    connectedCallback() {\n\n        this.addEventListener('graph', this.#onContent)\n        this.addEventListener('graph-active', this.#onActive)\n        window.addEventListener('resize', this.#resizeHandler)\n\n\n    }\n\n    disconnectedCallback() {\n\n        this.removeEventListener('graph', this.#onContent)\n        this.removeEventListener('graph-active', this.#onActive)\n        window.removeEventListener('resize', this.#resizeHandler)\n    }\n\n}\n\nif (!window.customElements.get('mermaid-preview')) {\n    window.customElements.define('mermaid-preview', MermaidPreview);\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$4jcZX","$2YFJl","$667cbdd6b09bcfba$export$52d2d9ddd9ad726","HTMLElement","observedAttributes","attributeChangedCallback","name","oldValue","newValue","console","debug","constructor","_content","_activeClass","_lastTransform","shadowRoot","attachShadow","mode","style","document","createElement","textContent","appendChild","container","classList","add","Array","from","childNodes","filter","node","nodeType","TEXT_NODE","map","trim","join","svgContainer","querySelector","N","render","then","res","right","width","bottom","height","getBoundingClientRect","translated","svg","replace","innerHTML","catch","e","error","svgs","select","self","each","html","inner","zoom","on","event","attr","transform","selection","detail","newContent","activeClass","attributes","theme","initialize","logLevel","startOnLoad","getAttribute","flowchart","useMaxWidth","sequence","gantt","journey","timeline","class","state","er","pie","quadrantChart","xyChart","requirement","mindmap","gitGraph","c4","sankey","block","connectedCallback","addEventListener","window","disconnectedCallback","removeEventListener","customElements","get","define"],"version":3,"file":"index-light.28d93f85.js.map"}